#this is comment1  
# this is comment2
data:
text:qwerty
longtext:~
Long multiline text
1\\~
22\~\n
333\ \\
4444~
deftext:other
i1:-12345
i2:-0X10
i3:2
f4:22222
f3:2222
f2:222
f1:22
f4:2
x1:3.14
x2:314
notloaded:44
notchanged:444
notsaved:4444
nosuchfield:value

#all fields except x1 will have default values
data:
x1:just x (string extvalue)

someotherdata:
this_object:will be ignored
because:we only load "data:" objects

data:
text:abcdefghijklmnopqrstuvwxyz
i1:notanumber
i2:-99999
i3:+99999
i4:notanumber_with_default
f1:-0x100
f2:-1e
f3:+1e1
f4:1ee
x1:@Serialized:[1,2,3,1.00000,2e0,3.0,"x","]","\""]
x2:@Serialized:{"a":[1,2,3],"b":"abc","c":1.23}

data:
i1:+0X10
i2:1e2
i3:-10
x1:next line will overwrite this
x1:@Serialized:{"a":[1,2,3],"b":^1,"c":^1}
x2:@Serialized:[[100,^1],["abc"],[300,^2]]
i3:5

#invalid serialization examples ahead
data:
# ^2 references the object occuring after the reference - only back references are allowed (here: ^0=whole object or ^1=[1,2,3])
x1:@Serialized:[[1,2,3],^2,[3,2,1]]
# ^3 references the nonexistent objects (the last one is ^2=[3,2,1])
x1:@Serialized:[[1,2,3],^3,[3,2,1]]
# whitespaces are not allowed (except before numeric types, as a side effect of "whitespace+number" being valid number)
x2:@Serialized:[1, 2, "3", { "key" : "value" }]
